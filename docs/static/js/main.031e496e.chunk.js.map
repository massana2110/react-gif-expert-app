{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GiftExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","console","log","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","key","GiftExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACbC,mBAAS,IADI,mBAC1CC,EAD0C,KAC9BC,EAD8B,KAgBjD,OACC,0BAAMC,SAVc,SAAAC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,KAEfO,QAAQC,IAAI,kBAKX,2BAAOC,KAAK,OAAOC,MAAOX,EAAYY,SAfd,SAAAT,GACzBF,EAAcE,EAAEU,OAAOF,Y,uBCPZG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAChBC,EADgB,iDACgCC,UACrDH,GAFqB,+DAIJI,MAAMF,GAJF,cAIhBG,EAJgB,gBAMCA,EAAIC,OANL,uBAMdC,EANc,EAMdA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACNC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZd,kBAgBfM,GAhBe,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACpC,OACC,yBAAKc,UAAU,qCACd,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCFMO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAAAA,GAAa,IAAD,EACbhB,mBAAS,CAClCuB,KAAM,GACNa,SAAS,IAH6B,mBAChCC,EADgC,KACzBC,EADyB,KAkBvC,OAZAC,qBAAU,WACTxB,EAAQC,GAAUwB,MAAK,SAAAC,GACtBC,YAAW,WACVjC,QAAQC,IAAI+B,GACZH,EAAS,CACRf,KAAMkB,EACNL,SAAS,MAER,UAEF,CAACpB,IAEGqB,EDhB2BM,CAAa3B,GAAjCa,EAD0B,EAChCN,KAAca,EADkB,EAClBA,QAEtB,OACC,oCACC,4BAAKpB,GACJoB,GAAW,sCACZ,yBAAKJ,UAAU,aACbH,EAAOJ,KAAI,SAAAC,GACX,OAAO,kBAAC,EAAD,eAAakB,IAAKlB,EAAIC,IAAQD,UEa3BmB,EAtBO,WAAO,IAAD,EACS7C,mBAAS,CAAC,WADnB,mBACpB8C,EADoB,KACR/C,EADQ,KAO3B,OACC,oCACC,6CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BACE+C,EAAWrB,KAAI,SAAAT,GAAQ,OACvB,kBAAC,EAAD,CAASA,SAAUA,EAAU4B,IAAK5B,UCbvC+B,IAASC,OAAO,kBAAC,EAAD,MAAmBC,SAASC,eAAe,U","file":"static/js/main.031e496e.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\tconst [inputValue, setInputValue] = useState('');\r\n\r\n\tconst handleInputChange = e => {\r\n\t\tsetInputValue(e.target.value);\r\n\t};\r\n\r\n\tconst handleSubmit = e => {\r\n\t\te.preventDefault();\r\n\t\tif (inputValue.trim().length > 2) {\r\n\t\t\tsetCategories(cats => [inputValue, ...cats]);\r\n\t\t\tsetInputValue('');\r\n\t\t}\r\n\t\tconsole.log('Submit hecho');\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t<input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nAddCategory.propTypes = {\r\n\tsetCategories: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async category => {\r\n\tconst url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n\t\tcategory\r\n\t)}&limit=10&api_key=UEmUDVd6SmR49e2loJAPC0eGl90qEEa5`;\r\n\tconst res = await fetch(url);\r\n\r\n\tconst { data } = await res.json();\r\n\r\n\tconst gifs = data.map(img => {\r\n\t\treturn {\r\n\t\t\tid: img.id,\r\n\t\t\ttitle: img.title,\r\n\t\t\turl: img.images?.downsized_medium.url,\r\n\t\t};\r\n\t});\r\n\r\n\treturn gifs;\r\n};\r\n","import React from 'react';\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n\treturn (\r\n\t\t<div className=\"animate__animated animate__fadeIn\">\r\n\t\t\t<img src={url} alt={title} />\r\n\t\t\t<p>{title}</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\tconst { data: images, loading } = useFetchGifs(category);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3>{category}</h3>\r\n\t\t\t{loading && <p>loading</p>}\r\n\t\t\t<div className=\"card-grid\">\r\n\t\t\t\t{images.map(img => {\r\n\t\t\t\t\treturn <GifGridItem key={img.id} {...img} />;\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = category => {\r\n\tconst [state, setstate] = useState({\r\n\t\tdata: [],\r\n\t\tloading: true,\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\tgetGifs(category).then(imgs => {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tconsole.log(imgs);\r\n\t\t\t\tsetstate({\r\n\t\t\t\t\tdata: imgs,\r\n\t\t\t\t\tloading: false,\r\n\t\t\t\t});\r\n\t\t\t}, 3000);\r\n\t\t});\r\n\t}, [category]);\r\n\r\n\treturn state; //{data: [], loading: true}\r\n};\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GiftExpertApp = () => {\r\n\tconst [categories, setCategories] = useState(['Naruto']);\r\n\r\n\t// const handleAdd = () => {\r\n\t// \tsetCategories([...categories, 'Pokemon']); //mantener todos los elementos anteriores mas el nuevo\r\n\t// };\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h2>GiftExpertApp</h2>\r\n\t\t\t<AddCategory setCategories={setCategories} />\r\n\t\t\t<hr />\r\n\r\n\t\t\t<ol>\r\n\t\t\t\t{categories.map(category => (\r\n\t\t\t\t\t<GifGrid category={category} key={category} />\r\n\t\t\t\t))}\r\n\t\t\t</ol>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default GiftExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport GiftExpertApp from './GiftExpertApp';\n\nReactDOM.render(<GiftExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}